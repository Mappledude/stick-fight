// Firestore security rules for Stick Fight
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function isAuthed() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthed() &&
        (request.auth.token.admin == true || request.auth.token.stickfightAdmin == true);
    }

    function playerDocAfter(roomId, uid) {
      return getAfter(/databases/$(db)/documents/rooms/$(roomId)/players/$(uid));
    }

    function isRoomMember(roomId) {
      return isAuthed() &&
        (request.auth.uid != null ? playerDocAfter(roomId, request.auth.uid).exists : false);
    }

    function roomWriteHasOnlyAllowedFields() {
      return request.resource.data.keys().hasOnly([
        'code',
        'active',
        'status',
        'createdAt',
        'updatedAt',
        'lastActivityAt',
        'maxPlayers',
        'hostPeerId',
        'hostUid',
        'playerCount'
      ]);
    }

    function roomUpdateHasOnlyAllowedChanges() {
      return resource.data.diff(request.resource.data).changedKeys().hasOnly([
        'updatedAt',
        'lastActivityAt',
        'playerCount',
        'hostPeerId',
        'status',
        'active',
        'maxPlayers'
      ]);
    }

    match /rooms/{roomId} {
      allow read: if true;

      allow create: if isAuthed() &&
        roomWriteHasOnlyAllowedFields() &&
        request.resource.data.code == roomId &&
        request.resource.data.hostUid == request.auth.uid;

      allow update: if isAuthed() &&
        roomWriteHasOnlyAllowedFields() &&
        request.resource.data.code == roomId &&
        request.resource.data.createdAt == resource.data.createdAt &&
        request.resource.data.hostUid == resource.data.hostUid &&
        (
          isAdmin() ||
          (isRoomMember(roomId) && roomUpdateHasOnlyAllowedChanges())
        );

      allow delete: if isAdmin();

      match /players/{uid} {
        allow read: if true;

        allow create, update: if (
            isAuthed() &&
            request.auth.uid == uid &&
            request.resource.data.uid == uid
          ) || (isAdmin() && request.resource.data.uid == uid);

        allow delete: if (isAuthed() && request.auth.uid == uid) || isAdmin();
      }

      match /signals/{peerId} {
        allow read, write: if isAuthed();
      }
    }
  }
}
